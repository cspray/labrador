#!/bin/sh

scriptPath=$(pwd)
projectName=$1

# Check to make sure that there is at least some project name given
if [ -z "$projectName" ]
then
    echo "You must provide a valid project name to get started"
    exit 255
fi

echo "Creating new Labrador project named $projectName"
echo

dirs=("$scriptPath/src/$projectName" "$scriptPath/public" "$scriptPath/config")

for item in "${dirs[@]}"
    do
        if [ -d "$item" ]
        then
            echo "$item already exists ... skipping"
        else
            if [ -w "$item" ]
            then
                echo "WARNING! $item is not writable ... skipping"
            else
                echo "Creating $item ... "
                mkdir -p "$item"
            fi
        fi
    done

cat > "$scriptPath/init.php" <<"EOF"
<?php

/**
 * This code was autogenerated by /vendor/bin/labrador-skeleton.sh; changing
 * code may result in your changes being overwritten.
 *
 * @license See LICENSE in source root
 * @version 0.1
 * @since   0.1
 */

set_error_handler(function($severity, $msg, $file, $line) {
    throw new ErrorException($msg, 0, $severity, $file, $line);
});
set_exception_handler(function(Exception $exception) {
    http_response_code(500);
    $msg = htmlspecialchars($exception->getMessage());
    echo <<<HTML
<!DOCTYPE html>
<html>
    <head>
        <title>Labrador Error</title>
    </head>
    <body>
        <h1>Internal Server Error</h1>
        <p>An error was encountered processing your request. Please contact the administrator.</p>
        <p>The error message was: {$msg}</p>
    </body>
</html>
HTML;
    exit;
});

require_once __DIR__ . '/vendor/autoload.php';

use Labrador\Bootstrap\FrontControllerBootstrap;

$masterConfig = include __DIR__ . '/config/master_config.php';
$provider = (new FrontControllerBootstrap($masterConfig))->run();
$app = $provider->make('Labrador\\Application');
$request = $provider->make('Symfony\\Component\\HttpFoundation\\Request');

$app->handle($request)->send();
EOF

cat > "$scriptPath/config/master_config.php" <<"EOF"
<?php

/**
 * This is the master configuration for the Labrador library; you can also use
 * this file to set any configuration values that should just always be set for
 * your application regardless of environment.
 *
 * @license See LICENSE in source root
 * @version 1.0
 * @since   1.0
 */

use Labrador\ConfigDirective;
use Configlet\Config;

return function(Config $config) {

    // php.ini settings that should be set regardless of environment
    // prefix any ini settings you want to change at runtime with ini.
    $config['ini.date.timezone'] = 'America/New_York';

    // Ensure that you read the documentation for each configuration value to
    // understand what is impacted when you change these values

    /**
     * ConfigDirective::ENVIRONMENT       string
     *
     * Determines the environment that the current application is running in. This
     * is a completely arbitrary string and only holds meaning to your application.
     */
    $config[ConfigDirective::ENVIRONMENT] = 'development';

    /**
     * ConfigDirective::ROOT_DIR          string
     *
     * The root directory that Labrador files live under.
     */
    $config[ConfigDirective::ROOT_DIR] = dirname(__DIR__);

    /**
     * ConfigDirective::CONFIG_DIR            string
     *
     * The configuration directory that Labrador and environment configurations
     * are stored.
     */
    $config[ConfigDirective::CONFIG_DIR] = $config[ConfigDirective::ROOT_DIR] . '/config';

    /**
     * ConfigDirective::ROUTES_CALLBACK       callable
     *
     * A callback accepting a Labrador\Router\Router as the only argument. That
     * function should set the appropriate routes for the application.
     */
    $config[ConfigDirective::ROUTES_CALLBACK] = include $config[ConfigDirective::CONFIG_DIR] . '/routes.php';

    /**
     * ConfigDirective::SERVICE_REGISTERS_CALLBACK            callable
     *
     * A callback accepting a Auryn\Provider as the only argument. The function
     * should set the appropriate dependencies and services needed by the application.
     */
    $config[ConfigDirective::SERVICE_REGISTERS_CALLBACK] = include $config[ConfigDirective::CONFIG_DIR] . '/services.php';

    /**
     * ConfigDirective::BOOTSTRAPS_CALLBACK               callable
     *
     * A callback accepting a Auryn\Provider as the first argument and a Configlet\Config
     * as the second argument. It should perform actions that are needed at time of
     * request startup after all configuration values have been written and all
     * services provided.
     */
    $config[ConfigDirective::BOOTSTRAPS_CALLBACK] = include $config[ConfigDirective::CONFIG_DIR] . '/bootstraps.php';

};
EOF

cat > "$scriptPath/config/bootstraps.php" <<"EOF"
<?php

/**
 * Setup or run the appropriate actions at application startup time.
 *
 * @license See LICENSE in source root
 * @version 1.0
 * @since   1.0
 */

use \Labrador\Bootstrap\ConfigRoutesBootstrap;
use Labrador\Bootstrap\EnvironmentConfigBootstrap;
use Labrador\Bootstrap\IniSetBootstrap;
use Configlet\Config;
use Auryn\Injector;

return function(Injector $injector, Config $config) {

    if ($config['ini'] instanceof Config) {
        (new IniSetBootstrap($config['ini']))->run();
    }

    // if you don't run this bootstrap we assume you have your own method
    // of adding routes to the $router; otherwise Labrador won't do anything!
    $router = $injector->make('Labrador\\Router\\FastRouteRouter');
    (new ConfigRoutesBootstrap($config, $router))->run();

};
EOF

files=("$scriptPath/config/services.php")

cat > "$scriptPath/config/routes.php" <<"EOF"
<?php

use Labrador\Router\Router;

return function(Router $router) {

    $router->get('/', 'LabradorDemo\\Controller\\HomeController#index');
    $router->get('/user-guide', 'LabradorDemo\\Controller\\HomeController#userGuide');

};

EOF

cat > "$scriptPath/config/services.php" <<"EOF"
<?php

/**
 * Return a callable that accepts a Auryn\Injector as the only argument and will
 * set appropriate services for ALL possible environments.
 *
 * @license See LICENSE in source root
 * @version 1.0
 * @since   1.0
 */

use Labrador\Service\DefaultServicesRegister;
use Labrador\ConfigDirective;
use Auryn\Injector;
use Configlet\Config;

/**
 * This function should set services against the Auryn\Injector; it should not
 * actually preform any actions on services or do anything other than set an
 * object graph and its dependencies.
 */
return function(Injector $injector, Config $config) {

    $demoTemplates = $config[ConfigDirective::ROOT_DIR] . '/src/LabradorDemo/_templates';
    $docDir = $config[ConfigDirective::ROOT_DIR] . '/doc';
    (new \LabradorDemo\Service\ControllerRegister($demoTemplates, $docDir))->register($injector);

    // This service register MUST be ran OR you MUST provide an instance of
    // Labrador\Application to the $provider with appropriate dependencies defined
    (new DefaultServicesRegister())->register($injector);

};

EOF

cat > "$scriptPath/public/index.php" <<"EOF"
<?php

require_once '../init.php';

EOF
